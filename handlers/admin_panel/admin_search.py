import random

from aiogram import F, Router, types
from aiogram.filters import Command, StateFilter, or_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from filter.chat_types import ChatTypeFilter, IsAdmin
from keyboard_list.reply import get_keyboard
from sqlalchemy.ext.asyncio import AsyncSession
from database.model import Product
from database.orm_query import orm_add_product, orm_delete_product, orm_get_product, orm_update_product, \
    orm_search_products

from database.orm_query import orm_get_products
from keyboard_list.inline import get_callback_btns

admin_search_products_router = Router()
admin_search_products_router.message.filter(ChatTypeFilter(["private"]), IsAdmin())


@admin_search_products_router.message(F.text.lower() == "üîç –ü–æ–∏—Å–∫")
@admin_search_products_router.message(Command("admin_search"))
async def search_command(message: types.Message, session: AsyncSession):
    query = message.text.split(maxsplit=1)[-1]

    if query.lower() not in ["/admin_search", "üîç –ü–æ–∏—Å–∫"]:
        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
        search_results = await orm_search_products(session, query)

        if search_results:
            for product in search_results:
                if product.section.lower() == '–¥—Ä—É–≥–∏–µ':  # Check for lowercase '–¥—Ä—É–≥–∏–µ'
                    size_info = ""  # –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª "–î—Ä—É–≥–∏–µ", —Ä–∞–∑–º–µ—Ä –Ω–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è
                else:
                    size_info = f"<b>üìè –†–∞–∑–º–µ—Ä:</b> {product.size}\n"
                description_text = (
                    f"<b>üÜî ID:</b> {product.id}\n"
                    f"<b>üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {product.name}\n"
                    f"<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ:</b> {product.description}\n"
                    f"<b>üîç –†–∞–∑–¥–µ–ª:</b> {product.section}\n"
                    f"<b>üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {product.category}\n"
                    f"<b>üë§ –ü–æ–ª :</b> {product.gender}\n"
                    f"{size_info}"  # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–µ
                    f"<b>üí∞ –¶–µ–Ω–∞:</b> {product.price}\n"
                )

                await message.answer_photo(
                    product.image,
                    caption=description_text,
                    reply_markup=get_callback_btns(
                        btns={
                            "–£–¥–∞–ª–∏—Ç—å": f"delete_{product.id}",
                            "–ò–∑–º–µ–Ω–∏—Ç—å": f"change_{product.id}",
                        }
                    ),
                )

        else:
            await message.reply(f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        await message.reply(
            "–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä, "
            "–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin_search –∏ —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –µ–≥–æ ID –∏–ª–∏ "
            "—Ü–µ–Ω—É.\n\n"
            "–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n"
            "/admin_search –ù–æ—É—Ç–±—É–∫ üñ•Ô∏è\n"
            "/admin_search 1234 üÜî\n"
            "/admin_search 1000 üí∞")


@admin_search_products_router.callback_query((F.data.startswith("admin_search")))
async def search_callback_handler(callback: types.CallbackQuery, session: AsyncSession):
    await callback.message.answer(text="–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä, "
                                       "–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin_search –∏ —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –µ–≥–æ ID –∏–ª–∏ "
                                       "—Ü–µ–Ω—É.\n\n"
                                       "–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n"
                                       "/admin_search –ù–æ—É—Ç–±—É–∫ üñ•Ô∏è\n"
                                       "/admin_search 1234 üÜî\n"
                                       "/admin_search 1000 üí∞")
