from aiogram import F, Router, types
from aiogram.filters import Command, StateFilter, or_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from filter.chat_types import ChatTypeFilter, IsAdmin
from keyboard_list.reply import get_keyboard
from sqlalchemy.ext.asyncio import AsyncSession
from database.model import Product
from database.orm_query import orm_add_product, orm_delete_product, orm_get_product, orm_update_product

from database.orm_query import orm_get_products
from keyboard_list.inline import *
from aiogram import types, Dispatcher
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardButton, \
    InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder



def get_sections_keyboard():
    keyboard = InlineKeyboardBuilder() # Add row_width to organize buttons in a single column
    keyboard.add(
        InlineKeyboardButton(text="–û–¥–µ–∂–¥–∞", callback_data="section_–û–¥–µ–∂–¥–∞"),
        InlineKeyboardButton(text="–û–±—É–≤—å", callback_data="section_–û–±—É–≤—å"),
        InlineKeyboardButton(text="–î—Ä—É–≥–∏–µ", callback_data="section_–î—Ä—É–≥–∏–µ"),
    )
    return keyboard.adjust().as_markup()

def get_categories_keyboard(section):
    keyboard =  InlineKeyboardBuilder()
    if section == "–æ–¥–µ–∂–¥–∞" or section == "–û–¥–µ–∂–¥–∞":
        keyboard.add(
            InlineKeyboardButton(text="–ö–æ—Ñ—Ç—ã", callback_data="category_–∫–æ—Ñ—Ç—ã"),  # Outerwear
            InlineKeyboardButton(text="–õ–æ–Ω–≥—Å–ª–∏–≤—ã", callback_data="category_–ª–æ–Ω–≥—Å–ª–∏–≤—ã"),  # Long sleeves
            InlineKeyboardButton(text="–•—É–¥–∏", callback_data="category_—Ö—É–¥–∏"),  # Hoodies
            InlineKeyboardButton(text="–§—É—Ç–±–æ–ª–∫–∏", callback_data="category_—Ñ—É—Ç–±–æ–ª–∫–∏"),  # T-shirts
            InlineKeyboardButton(text="–®—Ç–∞–Ω—ã", callback_data="category_—à—Ç–∞–Ω—ã"),  # Pants
            InlineKeyboardButton(text="–ö—É—Ä—Ç–∫–∏", callback_data="category_–∫—É—Ä—Ç–∫–∏"),  # Jackets
            InlineKeyboardButton(text="–®–æ—Ä—Ç—ã", callback_data="category_—à–æ—Ä—Ç—ã"),  # Shorts
        )

    elif section == "–û–±—É–≤—å" or section == "–æ–±—É–≤—å":
        keyboard.add(
            InlineKeyboardButton(text="–ö—Ä–æ—Å—Å–æ–≤–∫–∏", callback_data="category_–∫—Ä–æ—Å—Å–æ–≤–∫–∏"),
            InlineKeyboardButton(text="–ë–æ—Ç–∏–Ω–∫–∏", callback_data="category_–±–æ—Ç–∏–Ω–∫–∏"),
            InlineKeyboardButton(text="–°–∞–Ω–¥–∞–ª–∏–∏", callback_data="category_—Å–∞–Ω–¥–∞–ª–∏–∏"),
            InlineKeyboardButton(text="–¢—É—Ñ–ª–∏", callback_data="category_—Ç—É—Ñ–ª–∏"),
            InlineKeyboardButton(text="–°–∞–ø–æ–≥–∏", callback_data="category_—Å–∞–ø–æ–≥–∏"),
        )
    else:
        keyboard.add(
            InlineKeyboardButton(text="–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", callback_data="category_—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞"),
            InlineKeyboardButton(text="–ö–Ω–∏–≥–∏", callback_data="category_–∫–Ω–∏–≥–∏"),
            InlineKeyboardButton(text="–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã", callback_data="category_–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã"),
            InlineKeyboardButton(text="–ò–≥—Ä—É—à–∫–∏", callback_data="category_–∏–≥—Ä—É—à–∫–∏"),
            InlineKeyboardButton(text="–°–ø–æ—Ä—Ç—Ç–æ–≤–∞—Ä—ã", callback_data="category_—Å–ø–æ—Ä—Ç—Ç–æ–≤–∞—Ä—ã"),

        )

    return keyboard.adjust(3,3).as_markup()

def get_sizes_keyboard(section):
    keyboard = InlineKeyboardBuilder()
    if section == "–æ–¥–µ–∂–¥–∞" or section == "–û–¥–µ–∂–¥–∞":
        sizes = ["XS", "S", "M", "L", "XL", "XXL"]
        for size in sizes:
            keyboard.add(InlineKeyboardButton(text=size, callback_data=f"size_{size}"))
    else:
        sizes = ["35", "36", "37", "37,5-38", "38,5-39", "39", "39,5-40", "40", "40-40,5", "40,5-41",
         "41,5-42", "42", "42,5-43", "43", "43-44", "44-45", "45", "45-46", "46", "46-47"]
        for size in sizes:
              keyboard.add(InlineKeyboardButton(text=size, callback_data=f"size_{size}"))
    return keyboard.adjust(5, 5).as_markup()

def get_genders_keyboard():
    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π", callback_data="gender_–ú—É–∂—Å–∫–æ–π"),
        InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∞—è", callback_data="gender_–ñ–µ–Ω—Å–∫–∞—è"),
        InlineKeyboardButton(text="–î–ª—è –≤—Å–µ—Ö", callback_data="gender_–î–ª—è –≤—Å–µ—Ö")
    )
    return keyboard.adjust(3,3).as_markup()
catalog_admin_router = Router()
catalog_admin_router.message.filter(ChatTypeFilter(["private"]), IsAdmin())


class AdminCatalogFilters(StatesGroup):
    SECTION = State()
    CATEGORY = State()
    SIZE = State()
    GENDER = State()


def filter_products(products, filters):
    filtered_products = []
    for product in products:
        if (filters.get('size', 'any') == 'any' or product.size.lower() == filters['size'].lower()) and \
                (filters.get('section', 'any') == 'any' or product.section.lower() == filters['section'].lower()) and \
                (filters.get('category', 'any') == 'any' or product.category.lower() == filters['category'].lower()) and \
                (filters.get('gender', 'any') == 'any' or product.gender.lower() == filters['gender'].lower()):
            filtered_products.append(product)
    return filtered_products


@catalog_admin_router.message(F.text.lower() == "üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤")
@catalog_admin_router.message(Command("catalog_admin"))
async def start_catalog_filtering(message: types.Message, state: FSMContext):
    await message.answer_photo(
        photo=types.FSInputFile('media/images/scale_1200.png'),
        caption="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –∏—â–µ—Ç–µ —Ç–æ–≤–∞—Ä:",
        parse_mode="HTML",
        reply_markup=get_sections_keyboard()
    )

    await state.set_state(AdminCatalogFilters.SECTION)


@catalog_admin_router.callback_query((F.data.startswith("admin_catalog")))
async def start_catalog_filtering(callback_query: types.CallbackQuery, state: FSMContext):
    message = callback_query.message
    await message.answer_photo(
        photo=types.FSInputFile('media/images/scale_1200.png'),
        caption="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –∏—â–µ—Ç–µ —Ç–æ–≤–∞—Ä:",
        parse_mode="HTML",
        reply_markup=get_sections_keyboard()
    )

    await state.set_state(AdminCatalogFilters.SECTION)


@catalog_admin_router.callback_query(AdminCatalogFilters.SECTION, F.data.startswith("section_"))
async def process_section_choice(callback_query: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    await callback_query.answer()

    selected_section = callback_query.data.split('_')[1]

    await state.update_data(section=selected_section)
    await state.set_state(AdminCatalogFilters.CATEGORY)
    data = await state.get_data()
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:",
                                        reply_markup=get_categories_keyboard(data['section']))


@catalog_admin_router.callback_query(AdminCatalogFilters.CATEGORY, F.data.startswith("category_"))
async def process_category_choice(callback_query: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    await callback_query.answer()
    selected_category = callback_query.data.split('_')[1]
    await state.update_data(category=selected_category)
    await state.set_state(AdminCatalogFilters.CATEGORY)
    data = await state.get_data()
    if data['section'] == '–¥—Ä—É–≥–∏–µ' or data['section'] == '–î—Ä—É–≥–∏–µ':
        await state.set_state(AdminCatalogFilters.GENDER)
        await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞:", reply_markup=get_genders_keyboard())
    else:
        await state.set_state(AdminCatalogFilters.SIZE)
        await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞:", reply_markup=get_sizes_keyboard(data['section']))


@catalog_admin_router.callback_query(AdminCatalogFilters.SIZE, F.data.startswith("size_"))
async def process_size_choice(callback_query: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    selected_size = callback_query.data.split('_')[1]
    await state.update_data(size=selected_size)
    await state.set_state(AdminCatalogFilters.GENDER)
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª —Ç–æ–≤–∞—Ä–∞:", reply_markup=get_genders_keyboard())


@catalog_admin_router.callback_query(AdminCatalogFilters.GENDER, F.data.startswith("gender_"))
async def process_gender_choice(callback_query: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    selected_gender = callback_query.data.split('_')[1]
    await state.update_data(gender=selected_gender)
    message = callback_query.message
    data = await state.get_data()
    keyboard = ReplyKeyboardRemove()
    try:
        products = await orm_get_products(session)
    except Exception as e:
        await message.answer(f"An error occurred while fetching products: {e}")
        return

    filtered_products = filter_products(products, data)
    if not filtered_products:
        await message.answer("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.", reply_markup=keyboard)
        return

    for product in filtered_products:
        if product.section.lower() == '–¥—Ä—É–≥–∏–µ':  # Check for lowercase '–¥—Ä—É–≥–∏–µ'
            size_info = ""  # –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª "–î—Ä—É–≥–∏–µ", —Ä–∞–∑–º–µ—Ä –Ω–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è
        else:
            size_info = f"<b>üìè –†–∞–∑–º–µ—Ä:</b> {product.size}\n"
        description_text = (
            f"<b>üÜî ID:</b> {product.id}\n"
            f"<b>üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {product.name}\n"
            f"<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ:</b> {product.description}\n"
            f"<b>üîç –†–∞–∑–¥–µ–ª:</b> {product.section}\n"
            f"<b>üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {product.category}\n"
            f"<b>üë§ –¢–∏–ø:</b> {product.gender}\n"
            f"{size_info}"  # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–µ
            f"<b>üí∞ –¶–µ–Ω–∞:</b> {product.price}\n"
        )
        photos = [
            product.image1,
            product.image2,
            product.image3,
            product.image4,
        ]
        media = [
            types.InputMediaPhoto(media=photo_id, caption=description_text)
            for photo_id in photos
        ]

        # Send the media group with captions
        await message.answer_media_group(
            media=media,
        )
        await callback_query.message.answer(
            text=description_text,
            reply_markup=get_callback_btns(
                btns={
                    "–£–¥–∞–ª–∏—Ç—å": f"delete_{product.id}",
                    "–ò–∑–º–µ–Ω–∏—Ç—å": f"change_{product.id}",
                }
            ),
        )

        await state.clear()
    await message.answer("–û–ö, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ ‚è´")

