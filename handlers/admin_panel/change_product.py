from aiogram import F, Router, types, Bot
from aiogram.filters import Command, StateFilter, or_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove

from database.config import group_admin_chat_id, chat_id
from filter.chat_types import ChatTypeFilter, IsAdmin
from handlers.admin_panel.keyboards import get_sections_keyboard, admin_inline_keyboard, \
    get_categories_clothing_keyboard, get_categories_footwear_keyboard, get_categories_wear_keyboard, \
    get_sizes_clothing_keyboard, get_sizes_footwear_keyboard, get_gender_keyboard
from handlers.user_panel.order_functions import OrderState
from keyboard_list.reply import get_keyboard
from sqlalchemy.ext.asyncio import AsyncSession
from database.model import Product
from database.orm_query import orm_add_product, orm_delete_product, orm_get_product, orm_update_product
from database.orm_query import orm_get_products
from keyboard_list.inline import get_callback_btns

add_product_router = Router()
add_product_router.message.filter(ChatTypeFilter(["private"]), IsAdmin())

keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")],
        [KeyboardButton(text="–ù–∞–∑–∞–¥")],
    ],
    resize_keyboard=True,

)


class AddProduct(StatesGroup):
    name = State()
    description = State()
    section = State()
    category = State()
    gender = State()
    size = State()
    price = State()
    image = State()

    product_for_change = None

    texts = {
        'AddProduct:name': '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ üòä:',  #
        'AddProduct:description': '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ üìù:',
        'AddProduct:section': '–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —Ç–æ–≤–∞—Ä–∞:',
        'AddProduct:category': '–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:',
        'AddProduct:size': '–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞:',
        'AddProduct:gender': '–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª —Ç–æ–≤–∞—Ä–∞:',
        'AddProduct:price': '–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ üí∞:',
        'AddProduct:image': '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ üñºÔ∏è:',
    }


@add_product_router.message(StateFilter("*"), Command("–æ—Ç–º–µ–Ω–∞"))
@add_product_router.message(StateFilter("*"), F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state is None:
        return
    if AddProduct.product_for_change:
        AddProduct.product_for_change = None
    await state.clear()
    keyboard = ReplyKeyboardRemove()
    await message.answer("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=keyboard)


# –í–µ—Ä–Ω—É—Ç—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥ (–Ω–∞ –ø—Ä–æ—à–ª–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
@add_product_router.message(StateFilter("*"), Command("–Ω–∞–∑–∞–¥"))
@add_product_router.message(StateFilter("*"), F.text.casefold() == "–Ω–∞–∑–∞–¥")
async def back_handler(message: types.Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    data = await state.get_data()

    if current_state == OrderState.Name:
        await message.answer(
            '‚è™ –ü—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞" ‚è™')

        return

    previous = None
    for step in OrderState.__all_states__:
        if step.state == current_state:
            await state.set_state(previous)
            await message.answer(
                f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É:\n{OrderState.texts[previous.state]}",
            )
            return
        previous = step
    if current_state == AddProduct.name:
        await message.answer(
            '‚è™ –ü—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞" ‚è™')
        await state.set_state(AddProduct.name)
    if current_state == AddProduct.description:
        await message.answer(
            '‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É :üõçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:')
        await state.set_state(AddProduct.name)
    if current_state == AddProduct.section:
        await message.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É:üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:", reply_markup=keyboard)
        await state.set_state(AddProduct.description)
    if current_state == AddProduct.category:
        await message.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É: –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –ø—Ä–æ–¥—É–∫—Ç–∞:",
                             reply_markup=get_sections_keyboard())
        await state.set_state(AddProduct.section)
    if current_state == AddProduct.size:
        section = data['section']
        if section == "–æ–¥–µ–∂–¥–∞":
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–¥–µ–∂–¥—ã:", reply_markup=get_categories_clothing_keyboard())
            await state.set_state(AddProduct.category)
        elif section == "–æ–±—É–≤—å":
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—É–≤–∏:", reply_markup=get_categories_footwear_keyboard())
            await state.set_state(AddProduct.category)
        elif section == "–¥—Ä—É–≥–∏–µ":
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ –î—Ä—É–≥–∏–µ: ", reply_markup=get_categories_wear_keyboard())
            await state.set_state(AddProduct.category)
        else:
            await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")
    if current_state == AddProduct.gender:
        category = data['category']
        if category in ["–∫–æ—Ñ—Ç—ã", "–ª–æ–Ω–≥—Å–ª–∏–≤—ã", "—Ñ—É—Ç–±–æ–ª–∫–∏", "—Ö—É–¥–∏", "–∫—É—Ä—Ç–∫–∏", "—à—Ç–∞–Ω—ã", "—à–æ—Ä—Ç—ã"]:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:",
                                 reply_markup=get_sizes_clothing_keyboard())
            await state.set_state(AddProduct.size)
        elif category in ["–∫—Ä–æ—Å—Å–æ–≤–∫–∏", "–±–æ—Ç–∏–Ω–∫–∏", "—Å–∞–Ω–¥–∞–ª–∏–∏", "—Ç—É—Ñ–ª–∏", "—Å–∞–ø–æ–≥–∏"]:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:",
                                 reply_markup=get_sizes_footwear_keyboard())
            await state.set_state(AddProduct.size)

        else:
            await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")
    if current_state == AddProduct.price:
        await message.answer("–î–ª—è –∫–∞–∫–æ–≥–æ  –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–≤–∞—Ä:",
                             reply_markup=get_gender_keyboard())
        await state.set_state(AddProduct.gender)
    if current_state == AddProduct.image:
        await message.answer("üí¨ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å:", reply_markup=keyboard)
        await state.set_state(AddProduct.price)


# ->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> add  product
@add_product_router.message(StateFilter(None), F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
@add_product_router.message(StateFilter(None), Command('add_product'))
async def add_product(message: types.Message, state: FSMContext):
    await message.answer("üõçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:", reply_markup=keyboard)
    await state.set_state(AddProduct.name)


@add_product_router.callback_query(StateFilter(None), F.data.startswith("add_product"))
async def add_product(callback: types.CallbackQuery, session: AsyncSession, state: FSMContext):
    message = callback.message
    await message.answer("üõçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:", reply_markup=keyboard)
    await state.set_state(AddProduct.name)


@add_product_router.message(AddProduct.name, or_f(F.text, F.text == '.'))
async def add_name(message: types.Message, state: FSMContext):
    if message.text == ".":
        await state.update_data(name=AddProduct.product_for_change.name)
    else:
        if len(message.text) >= 100:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤. \n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                                 reply_markup=keyboard)
            return

        await state.update_data(name=message.text)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:", reply_markup=keyboard)
    await state.set_state(AddProduct.description)


@add_product_router.message(AddProduct.name)
async def add_name2(message: types.Message, state: FSMContext):
    await message.answer("‚ùå –í—ã –≤–≤–µ–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.", )


@add_product_router.message(AddProduct.description, or_f(F.text, F.text == "."))
async def add_description(message: types.Message, state: FSMContext):
    if message.text == ".":
        await state.update_data(description=AddProduct.product_for_change.description)
    else:
        await state.update_data(description=message.text)
    await message.answer("üí¨ –û—Ç–ª–∏—á–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –ø—Ä–æ–¥—É–∫—Ç–∞:", reply_markup=get_sections_keyboard())
    await state.set_state(AddProduct.section)


@add_product_router.message(AddProduct.description)
async def add_description2(message: types.Message, state: FSMContext):
    await message.answer("‚ùå –í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.")


@add_product_router.message(AddProduct.section, or_f(F.text, F.text == "."))
async def get_section(message: types.Message, state: FSMContext):
    section = message.text.strip().lower()
    if message.text == ".":
        await state.update_data(section=AddProduct.product_for_change.section)
        section = AddProduct.product_for_change.section

    else:
        await state.update_data(section=section)

    if section == "–æ–¥–µ–∂–¥–∞":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–¥–µ–∂–¥—ã:", reply_markup=get_categories_clothing_keyboard())
        await state.set_state(AddProduct.category)
    elif section == "–æ–±—É–≤—å":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—É–≤–∏:", reply_markup=get_categories_footwear_keyboard())
        await state.set_state(AddProduct.category)
    elif section == "–¥—Ä—É–≥–∏–µ":
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ –î—Ä—É–≥–∏–µ: ", reply_markup=get_categories_wear_keyboard())
        await state.set_state(AddProduct.category)
    else:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")


@add_product_router.message(AddProduct.section)
async def get_section2(message: types.Message, state: FSMContext):
    await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")


@add_product_router.message(AddProduct.category, or_f(F.text, F.text == "."))
async def get_category(message: types.Message, state: FSMContext):
    category = message.text.strip().lower()
    if message.text == ".":
        await state.update_data(category=AddProduct.product_for_change.category)
        category = AddProduct.product_for_change.category
    else:
        await state.update_data(category=category)
    # –î–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if category in ["–∫–æ—Ñ—Ç—ã", "–ª–æ–Ω–≥—Å–ª–∏–≤—ã", "—Ñ—É—Ç–±–æ–ª–∫–∏", "—Ö—É–¥–∏", "–∫—É—Ä—Ç–∫–∏", "—à—Ç–∞–Ω—ã", "—à–æ—Ä—Ç—ã"]:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:",
                             reply_markup=get_sizes_clothing_keyboard())
        await state.set_state(AddProduct.size)
    elif category in ["–∫—Ä–æ—Å—Å–æ–≤–∫–∏", "–±–æ—Ç–∏–Ω–∫–∏", "—Å–∞–Ω–¥–∞–ª–∏–∏", "—Ç—É—Ñ–ª–∏", "—Å–∞–ø–æ–≥–∏"]:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:",
                             reply_markup=get_sizes_footwear_keyboard())
        await state.set_state(AddProduct.size)
    elif category in ["—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", "–∏–≥—Ä—É—à–∫–∏", "–∫–Ω–∏–≥–∏", "—Å–ø–æ—Ä—Ç—Ç–æ–≤–∞—Ä—ã", "–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã"]:
        await state.update_data(size='.')
        await message.answer("–î–ª—è –∫–∞–∫–æ–≥–æ  –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–≤–∞—Ä:",
                             reply_markup=get_gender_keyboard())
        await state.set_state(AddProduct.gender)
    else:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")


@add_product_router.message(AddProduct.category)
async def get_category2(message: types.Message, state: FSMContext):
    await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")


@add_product_router.message(AddProduct.size, or_f(F.text, F.text == "."))
async def get_size(message: types.Message, state: FSMContext):
    size = message.text.strip().lower()
    data = await state.get_data()
    if message.text == ".":
        await state.update_data(size=AddProduct.product_for_change.size)
        size = AddProduct.product_for_change.size

    else:
        await state.update_data(size=size)

    if size in ["xs", "s", "m", "l", "xl", "xxl"] or size in [
        "35", "36", "37", "37,5-38", "38,5-39", "39", "39,5-40", "40", "40-40,5", "40,5-41",
        "41,5-42", "42", "42,5-43", "43", "43-44", "44-45", "45", "45-46", "46", "46-47"
    ]:
        await message.answer("–î–ª—è –∫–∞–∫–æ–≥–æ  –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–≤–∞—Ä:",
                             reply_markup=get_gender_keyboard())
        await state.set_state(AddProduct.gender)

    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")


@add_product_router.message(AddProduct.size)
async def get_size2(message: types.Message, state: FSMContext):
    await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")


@add_product_router.message(AddProduct.gender, or_f(F.text, F.text == "."))
async def get_type(message: types.Message, state: FSMContext):
    gender = message.text.strip().lower()
    data = await state.get_data()

    if message.text == ".":
        await state.update_data(gender=AddProduct.product_for_change.gender)
    else:
        await state.update_data(gender=gender)
    if data['category'] in ["—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", "–∏–≥—Ä—É—à–∫–∏", "–∫–Ω–∏–≥–∏", "—Å–ø–æ—Ä—Ç—Ç–æ–≤–∞—Ä—ã", "–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã"]:
        keyboard—Ñ—ã = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")],
            ],
            resize_keyboard=True,
        )
        await message.answer("üí¨ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å:", reply_markup=keyboard—Ñ—ã)

    else:
        await message.answer("üí¨ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å:", reply_markup=keyboard)
    await state.set_state(AddProduct.price)


@add_product_router.message(AddProduct.gender)
async def get_type2(message: types.Message, state: FSMContext):
    await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")


@add_product_router.message(AddProduct.price, or_f(F.text, F.text == "."))
async def add_price(message: types.Message, state: FSMContext):
    data = await state.get_data()

    if message.text == ".":
        await state.update_data(price=AddProduct.product_for_change.price)
    else:
        await state.update_data(price=message.text)
    if data['category'] in ["—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", "–∏–≥—Ä—É—à–∫–∏", "–∫–Ω–∏–≥–∏", "—Å–ø–æ—Ä—Ç—Ç–æ–≤–∞—Ä—ã", "–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã"]:
        keyboard—Ñ—ã = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")],
            ],
            resize_keyboard=True,
        )
        await message.answer("üñºÔ∏è –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ :", reply_markup=keyboard—Ñ—ã)

    else:
        await message.answer("üñºÔ∏è –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ :", reply_markup=keyboard)
    await state.set_state(AddProduct.image)


@add_product_router.message(AddProduct.price)
async def add_price2(message: types.Message, state: FSMContext):
    await message.answer("‚ùå –í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É.",
                         )


@add_product_router.message(AddProduct.image, or_f(F.photo, F.text == "."))
async def add_image(message: types.Message, state: FSMContext, session: AsyncSession, bot: Bot):
    if message.text and message.text == "." and AddProduct.product_for_change:
        await state.update_data(image=AddProduct.product_for_change.image)

    elif message.photo:
        await state.update_data(image=message.photo[-1].file_id)
    else:
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ ")
        return
    data = await state.get_data()
    keyboard = ReplyKeyboardRemove()

    try:
        if AddProduct.product_for_change:
            await orm_update_product(session, AddProduct.product_for_change.id, data)
            if data['section'].lower() == '–¥—Ä—É–≥–∏–µ':
                size_info = ""  # If section is "–î—Ä—É–≥–∏–µ", size info is not displayed
            else:
                size_info = f"<b>üìè –†–∞–∑–º–µ—Ä:</b> {data['size']}\n"

                # Construct the message text
            text = (
                "<b>üì¶ —Ç–æ–≤–∞—Ä –∏–∑–º–µ–Ω–µ–Ω !</b>\n"
                f"<b>üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n"
                f"<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n"
                f"<b>üîç –†–∞–∑–¥–µ–ª:</b> {data['section']}\n"
                f"<b>üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {data['category']}\n"
                f"<b>üë§ –ü–æ–ª:</b> {data['gender']}\n"
                f"{size_info}"  # Insert size information if available
                f"<b>üí∞ –¶–µ–Ω–∞:</b> {data['price']}\n\n"
            )

            # Send the notification to the admin group chat
            await bot.send_photo(group_admin_chat_id, data['image'], caption=text)

            # Notify the user of the successful operation
            await message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!", reply_markup=keyboard)
        else:
            await orm_add_product(session, data)

            if data['section'].lower() == '–¥—Ä—É–≥–∏–µ':
                size_info = ""  # If section is "–î—Ä—É–≥–∏–µ", size info is not displayed
            else:
                size_info = f"<b>üìè –†–∞–∑–º–µ—Ä:</b> {data['size']}\n"

                # Construct the message text
            text = (
                "<b>üì¶ –ù–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥!</b>\n"
                f"<b>üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n"
                f"<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n"
                f"<b>üîç –†–∞–∑–¥–µ–ª:</b> {data['section']}\n"
                f"<b>üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {data['category']}\n"
                f"<b>üë§ –ü–æ–ª:</b> {data['gender']}\n"
                f"{size_info}"  # Insert size information if available
                f"<b>üí∞ –¶–µ–Ω–∞:</b> {data['price']}\n\n"
            )

            # Send the notification to the admin group chat
            await bot.send_photo(group_admin_chat_id, data['image'], caption=text)
            # Send the notification to the user chat
            await bot.send_photo(chat_id, data['image'], caption=text)

            # Notify the user of the successful operation
            await message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=keyboard)

        await state.clear()
    except Exception as e:
        print(e)
        await state.clear()

    AddProduct.product_for_change = None


@add_product_router.message(AddProduct.image)
async def add_image2(message: types.Message, state: FSMContext):
    await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")


# -------------------------> Del product <-------------------------------------------------------------
@add_product_router.callback_query(F.data.startswith("delete_"))
async def delete_product_callback(callback: types.CallbackQuery, session: AsyncSession):
    product_id = callback.data.split("_")[-1]
    await orm_delete_product(session, int(product_id))

    await callback.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
    await callback.message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ –£–¥–∞–ª–µ–Ω !!!")


# -------------------------------> END <--------------------------------------------------------------
# --------------------------------------------> Edit product <--------------------------------------
@add_product_router.callback_query(StateFilter(None), F.data.startswith("change_"))
async def change_product_callback(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    product_id = callback.data.split("_")[-1]
    product_for_change = await orm_get_product(session, int(product_id))
    AddProduct.product_for_change = product_for_change

    await callback.answer()
    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", reply_markup=keyboard
    )
    await callback.message.answer(
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —à–∞–≥–∏, –≤–≤–æ–¥—è —Ç–æ—á–∫–∏ (.) üòä"
    )
    await state.set_state(AddProduct.name)

# -------------------------------> END <--------------------------------------------------------------
