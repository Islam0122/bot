import random

from aiogram import F, Router, types
from aiogram.filters import Command, StateFilter, or_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from filter.chat_types import ChatTypeFilter, IsAdmin
from keyboard_list.reply import get_keyboard
from sqlalchemy.ext.asyncio import AsyncSession
from database.model import Product
from database.orm_query import orm_add_product, orm_delete_product, orm_get_product, orm_update_product

from database.orm_query import orm_get_products
from keyboard_list.inline import get_callback_btns

popular_products_router = Router()
popular_products_router.message.filter(ChatTypeFilter(["private"]))


@popular_products_router.message(F.text.lower() == "üöÄ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã")
@popular_products_router.message(Command("popular_products"))
async def popular_products_at_product(message: types.Message, session: AsyncSession):
    products = await orm_get_products(session)
    random_products = random.choices(products, k=min(len(products), 5))
    for product in random_products:
        if product.section.lower() == '–¥—Ä—É–≥–∏–µ':  # Check for lowercase '–¥—Ä—É–≥–∏–µ'
            size_info = ""  # –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª "–î—Ä—É–≥–∏–µ", —Ä–∞–∑–º–µ—Ä –Ω–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è
        else:
            size_info=f"<b>üìè –†–∞–∑–º–µ—Ä:</b> {product.size}\n"
        description_text = (
            f"<b>üÜî ID:</b> {product.id}\n"
            f"<b>üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {product.name}\n"
            f"<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ:</b> {product.description}\n"
            f"<b>üîç –†–∞–∑–¥–µ–ª:</b> {product.section}\n"
            f"<b>üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {product.category}\n"
            f"<b>üë§ –¢–∏–ø:</b> {product.gender}\n"
            f"{size_info}"  # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–µ
            f"<b>üí∞ –¶–µ–Ω–∞:</b> {product.price}\n"
        )

        await message.answer_photo(
            product.image,
            caption=description_text,
            reply_markup=get_callback_btns(
                btns={
                    f"–ö—É–ø–∏—Ç—å {product.name}": f"buy_{product.id}",
                }
            ),
        )


@popular_products_router.callback_query((F.data.startswith("popular_products")))
async def popular_products_callback_handler(query: types.CallbackQuery, session: AsyncSession):
    message = query.message
    products = await orm_get_products(session)
    random_products = random.choices(products, k=min(len(products), 5))
    for product in random_products:
        if product.section.lower() == '–¥—Ä—É–≥–∏–µ':  # Check for lowercase '–¥—Ä—É–≥–∏–µ'
            size_info = ""  # –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª "–î—Ä—É–≥–∏–µ", —Ä–∞–∑–º–µ—Ä –Ω–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è
        else:
            size_info=f"<b>üìè –†–∞–∑–º–µ—Ä:</b> {product.size}\n"

        description_text = (
            f"<b>üÜî ID:</b> {product.id}\n"
            f"<b>üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {product.name}\n"
            f"<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ:</b> {product.description}\n"
            f"<b>üîç –†–∞–∑–¥–µ–ª:</b> {product.section}\n"
            f"<b>üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {product.category}\n"
            f"<b>üë§ –ü–æ–ª :</b> {product.gender}\n"
            f"{size_info}"  # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–µ
            f"<b>üí∞ –¶–µ–Ω–∞:</b> {product.price}\n"
          )

        await message.answer_photo(
            product.image,
            caption=description_text,
            reply_markup=get_callback_btns(
                btns={
                    f"–ö—É–ø–∏—Ç—å {product.name}": f"buy_{product.id}",
                }
            ),
        )