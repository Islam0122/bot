from aiogram import F, Router, types, Bot
from aiogram.filters import Command, StateFilter, or_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove

from database.config import group_admin_chat_id
from filter.chat_types import ChatTypeFilter, IsAdmin
from handlers.admin_panel.keyboards import get_sections_keyboard, admin_inline_keyboard, \
    get_categories_clothing_keyboard, get_categories_footwear_keyboard, get_categories_wear_keyboard, \
    get_sizes_clothing_keyboard, get_sizes_footwear_keyboard, get_gender_keyboard
from keyboard_list.reply import get_keyboard
from sqlalchemy.ext.asyncio import AsyncSession
from database.model import Product
from database.orm_query import orm_add_product, orm_delete_product, orm_get_product, orm_update_product
from database.orm_query import orm_get_products
from keyboard_list.inline import get_callback_btns

keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–æ—Ç–º–µ–Ω–∞")],
        [KeyboardButton(text="–Ω–∞–∑–∞–¥")],
    ],
    resize_keyboard=True,

)
# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
class OrderState(StatesGroup):
    Product = State()
    Name = State()
    PhoneNumber = State()
    Email = State()
    Address = State()
    product_for_change = None
    texts = {
        'OrderState:Name': '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û üòä:',
        'OrderState:PhoneNumber': '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üìû:',
        'OrderState:Email': '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã ‚úâÔ∏è:',
        'OrderState:Address': '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å  üè†:',
    }


order_router = Router()
order_router.message.filter(ChatTypeFilter(["private"]))


@order_router.callback_query(StateFilter(None), F.data.startswith("buy_"))
async def order_product_callback(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    product_id = callback.data.split("_")[-1]
    print(product_id)
    message = callback.message
    if message:
        await message.answer(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä —Å ID {product_id}. –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",reply_markup=keyboard)
        await state.update_data(product_id=product_id)
        await state.set_state(OrderState.Name)

    else:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
@order_router.message(OrderState.Name)
async def process_name(message: types.Message, state: FSMContext):
    if message.text:
        await message.answer("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        await state.update_data(name=message.text)
        await state.set_state(OrderState.PhoneNumber)
    else:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")


@order_router.message(OrderState.PhoneNumber)
async def process_phone_number(message: types.Message, state: FSMContext):
    if message.text:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if message.text:
            await state.update_data(phone_number=message.text)
            await message.answer("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É:")
            await state.set_state(OrderState.Email)
        else:
            await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ü–∏—Ñ—Ä –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤).")
    else:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")



@order_router.message(OrderState.Email)
async def process_email(message: types.Message, state: FSMContext):
    if message.text:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É)
        if message.text :
            await state.update_data(email=message.text)
            await message.answer("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å:")
            await state.set_state(OrderState.Address)
        else:
            await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã.")
    else:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")


@order_router.message(OrderState.Address)
async def process_address(message: types.Message, state: FSMContext, bot: Bot, session: AsyncSession):
    keyboard = ReplyKeyboardRemove()
    data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if message.text:
        user_info = f"{message.from_user.first_name}"
        if message.from_user.last_name:
            user_info += f" {message.from_user.last_name}"
        if message.from_user.username:
            user_info += f" (@{message.from_user.username})"
        product = await orm_get_product(session,data.get('product_id'))
        if product.section.lower() == '–¥—Ä—É–≥–∏–µ':  # Check for lowercase '–¥—Ä—É–≥–∏–µ'
            size_info = ""  # –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª "–î—Ä—É–≥–∏–µ", —Ä–∞–∑–º–µ—Ä –Ω–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è
        else:
            size_info = f"<b>üìè –†–∞–∑–º–µ—Ä:</b> {product.size}\n"
        text = (
            f"<b>üÜî ID:</b> {product.id}\n"
            f"<b>üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {product.name}\n"
            f"<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ:</b> {product.description}\n"
            f"<b>üîç –†–∞–∑–¥–µ–ª:</b> {product.section}\n"
            f"<b>üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {product.category}\n"
            f"<b>üë§ –ü–æ–ª :</b> {product.gender}\n"
            f"{size_info}"  # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–µ
            f"<b>üí∞ –¶–µ–Ω–∞:</b> {product.price}\n\n"
            f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç {user_info}:\n" \
            f"–ò–º—è: {data.get('name')}\n" \
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone_number')}\n" \
            f"Email: {data.get('email')}\n" \
            f"–ê–¥—Ä–µ—Å: {message.text}\n" \
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await bot.send_photo(group_admin_chat_id,product.image,caption= text)
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! –í–∞—à –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω. üòä")
        await message.answer("–ê–¥–º–∏–Ω —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è! üìû", reply_markup=keyboard)
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    else:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")

